2025-07-15 13:46:10,766   INFO  **********************Start logging**********************
2025-07-15 13:46:10,766   INFO  CUDA_VISIBLE_DEVICES=ALL
2025-07-15 13:46:10,766   INFO  cfg_file         cfgs/models/kitti/VirConv-T.yaml
2025-07-15 13:46:10,766   INFO  batch_size       2
2025-07-15 13:46:10,766   INFO  epochs           60
2025-07-15 13:46:10,766   INFO  workers          0
2025-07-15 13:46:10,766   INFO  extra_tag        default
2025-07-15 13:46:10,766   INFO  ckpt             None
2025-07-15 13:46:10,766   INFO  pretrained_model None
2025-07-15 13:46:10,766   INFO  launcher         none
2025-07-15 13:46:10,766   INFO  tcp_port         23271
2025-07-15 13:46:10,766   INFO  sync_bn          False
2025-07-15 13:46:10,766   INFO  fix_random_seed  True
2025-07-15 13:46:10,766   INFO  ckpt_save_interval 1
2025-07-15 13:46:10,766   INFO  local_rank       0
2025-07-15 13:46:10,766   INFO  max_ckpt_save_num 30
2025-07-15 13:46:10,766   INFO  merge_all_iters_to_one_epoch False
2025-07-15 13:46:10,766   INFO  set_cfgs         None
2025-07-15 13:46:10,766   INFO  max_waiting_mins 0
2025-07-15 13:46:10,766   INFO  start_epoch      0
2025-07-15 13:46:10,766   INFO  save_to_file     False
2025-07-15 13:46:10,766   INFO  cfg.ROOT_DIR: /home/veerain/Documents/VirConv
2025-07-15 13:46:10,766   INFO  cfg.LOCAL_RANK: 0
2025-07-15 13:46:10,766   INFO  cfg.CLASS_NAMES: ['Car']
2025-07-15 13:46:10,766   INFO  
cfg.DATA_CONFIG = edict()
2025-07-15 13:46:10,766   INFO  cfg.DATA_CONFIG.DATA_PATH: ../data/kitti
2025-07-15 13:46:10,766   INFO  cfg.DATA_CONFIG.DATASET: KittiDatasetMM
2025-07-15 13:46:10,766   INFO  cfg.DATA_CONFIG.MM_PATH: velodyne_depth
2025-07-15 13:46:10,766   INFO  cfg.DATA_CONFIG.POINT_CLOUD_RANGE: [0, -40, -3, 70.4, 40, 1]
2025-07-15 13:46:10,766   INFO  
cfg.DATA_CONFIG.DATA_SPLIT = edict()
2025-07-15 13:46:10,766   INFO  cfg.DATA_CONFIG.DATA_SPLIT.train: train
2025-07-15 13:46:10,766   INFO  cfg.DATA_CONFIG.DATA_SPLIT.test: val
2025-07-15 13:46:10,766   INFO  
cfg.DATA_CONFIG.INFO_PATH = edict()
2025-07-15 13:46:10,766   INFO  cfg.DATA_CONFIG.INFO_PATH.train: ['kitti_infos_train.pkl']
2025-07-15 13:46:10,766   INFO  cfg.DATA_CONFIG.INFO_PATH.test: ['kitti_infos_val.pkl']
2025-07-15 13:46:10,766   INFO  cfg.DATA_CONFIG.FOV_POINTS_ONLY: True
2025-07-15 13:46:10,766   INFO  
cfg.DATA_CONFIG.DATA_AUGMENTOR = edict()
2025-07-15 13:46:10,766   INFO  cfg.DATA_CONFIG.DATA_AUGMENTOR.DISABLE_AUG_LIST: ['placeholder']
2025-07-15 13:46:10,766   INFO  cfg.DATA_CONFIG.DATA_AUGMENTOR.AUG_CONFIG_LIST: [{'NAME': 'gt_sampling', 'USE_ROAD_PLANE': True, 'DB_INFO_PATH': ['kitti_dbinfos_train_mm.pkl'], 'PREPARE': {'filter_by_min_points': ['Car:5', 'Pedestrian:5', 'Cyclist:5'], 'filter_by_difficulty': [-1]}, 'SAMPLE_GROUPS': ['Car:10', 'Pedestrian:10', 'Cyclist:10'], 'NUM_POINT_FEATURES': 8, 'DATABASE_WITH_FAKELIDAR': False, 'REMOVE_EXTRA_WIDTH': [0.0, 0.0, -0.2], 'LIMIT_WHOLE_SCENE': False}, {'NAME': 'da_sampling', 'USE_ROAD_PLANE': True, 'DB_INFO_PATH': ['kitti_dbinfos_train_mm.pkl'], 'PREPARE': {'filter_by_min_points': ['Car:5'], 'filter_by_difficulty': [-1]}, 'SAMPLE_GROUPS': ['Car:10'], 'MIN_SAMPLING_DIS': 0, 'MAX_SAMPLING_DIS': 20, 'OCCLUSION_NOISE': 0.2, 'OCCLUSION_OFFSET': 2.0, 'SAMPLING_METHOD': 'LiDAR-aware', 'VERT_RES': 0.006, 'HOR_RES': 0.003, 'NUM_POINT_FEATURES': 8, 'DATABASE_WITH_FAKELIDAR': False, 'REMOVE_EXTRA_WIDTH': [0.0, 0.0, -0.2], 'LIMIT_WHOLE_SCENE': False}, {'NAME': 'random_local_noise', 'LOCAL_ROT_RANGE': [-0.78539816, 0.78539816], 'TRANSLATION_STD': [1.0, 1.0, 0.5], 'GLOBAL_ROT_RANGE': [0.0, 0.0], 'EXTRA_WIDTH': [0.2, 0.2, 0.0]}, {'NAME': 'random_world_rotation', 'WORLD_ROT_ANGLE': [-0.78539816, 0.78539816]}, {'NAME': 'random_world_flip', 'ALONG_AXIS_LIST': ['x']}, {'NAME': 'random_world_scaling', 'WORLD_SCALE_RANGE': [0.95, 1.05]}, {'NAME': 'random_local_trans', 'TRANSLATION_STD': [1.0, 1.0, 0.2]}, {'NAME': 'random_local_pyramid_aug', 'DROP_PROB': 0.25, 'SPARSIFY_PROB': 0.05, 'SPARSIFY_MAX_NUM': 50, 'SWAP_PROB': 0.1, 'SWAP_MAX_NUM': 50}]
2025-07-15 13:46:10,766   INFO  
cfg.DATA_CONFIG.POINT_FEATURE_ENCODING = edict()
2025-07-15 13:46:10,766   INFO  cfg.DATA_CONFIG.POINT_FEATURE_ENCODING.encoding_type: absolute_coordinates_encoding_mm
2025-07-15 13:46:10,766   INFO  cfg.DATA_CONFIG.POINT_FEATURE_ENCODING.used_feature_list: ['x', 'y', 'z', 'intensity']
2025-07-15 13:46:10,766   INFO  cfg.DATA_CONFIG.POINT_FEATURE_ENCODING.src_feature_list: ['x', 'y', 'z', 'intensity']
2025-07-15 13:46:10,766   INFO  cfg.DATA_CONFIG.POINT_FEATURE_ENCODING.num_features: 8
2025-07-15 13:46:10,766   INFO  cfg.DATA_CONFIG.DATA_PROCESSOR: [{'NAME': 'mask_points_and_boxes_outside_range', 'REMOVE_OUTSIDE_BOXES': True}, {'NAME': 'shuffle_points', 'SHUFFLE_ENABLED': {'train': True, 'test': False}}, {'NAME': 'transform_points_to_voxels', 'VOXEL_SIZE': [0.05, 0.05, 0.05], 'MAX_POINTS_PER_VOXEL': 5, 'MAX_NUMBER_OF_VOXELS': {'train': 16000, 'test': 40000}}]
2025-07-15 13:46:10,766   INFO  cfg.DATA_CONFIG._BASE_CONFIG_: cfgs/dataset_configs/kitti_dataset.yaml
2025-07-15 13:46:10,766   INFO  cfg.DATA_CONFIG.INPUT_DISCARD_RATE: 0.8
2025-07-15 13:46:10,766   INFO  cfg.DATA_CONFIG.ROT_NUM: 3
2025-07-15 13:46:10,766   INFO  cfg.DATA_CONFIG.USE_VAN: True
2025-07-15 13:46:10,766   INFO  cfg.DATA_CONFIG.MM: True
2025-07-15 13:46:10,766   INFO  
cfg.DATA_CONFIG.X_TRANS = edict()
2025-07-15 13:46:10,766   INFO  cfg.DATA_CONFIG.X_TRANS.AUG_CONFIG_LIST: [{'NAME': 'world_rotation', 'WORLD_ROT_ANGLE': [0.3, 0.3, 0]}, {'NAME': 'world_flip', 'ALONG_AXIS_LIST': [0, 1.0, 1.0]}, {'NAME': 'world_scaling', 'WORLD_SCALE_RANGE': [0.98, 1.02, 1.0]}]
2025-07-15 13:46:10,766   INFO  
cfg.MODEL = edict()
2025-07-15 13:46:10,766   INFO  cfg.MODEL.NAME: VoxelRCNN
2025-07-15 13:46:10,766   INFO  
cfg.MODEL.VFE = edict()
2025-07-15 13:46:10,767   INFO  cfg.MODEL.VFE.NAME: MeanVFE
2025-07-15 13:46:10,767   INFO  cfg.MODEL.VFE.MODEL: max
2025-07-15 13:46:10,767   INFO  
cfg.MODEL.BACKBONE_3D = edict()
2025-07-15 13:46:10,767   INFO  cfg.MODEL.BACKBONE_3D.NAME: VirConv8x
2025-07-15 13:46:10,767   INFO  cfg.MODEL.BACKBONE_3D.NUM_FILTERS: [16, 32, 64, 64]
2025-07-15 13:46:10,767   INFO  cfg.MODEL.BACKBONE_3D.RETURN_NUM_FEATURES_AS_DICT: True
2025-07-15 13:46:10,767   INFO  cfg.MODEL.BACKBONE_3D.OUT_FEATURES: 64
2025-07-15 13:46:10,767   INFO  cfg.MODEL.BACKBONE_3D.MM: True
2025-07-15 13:46:10,767   INFO  cfg.MODEL.BACKBONE_3D.LAYER_DISCARD_RATE: 0.15
2025-07-15 13:46:10,767   INFO  
cfg.MODEL.MAP_TO_BEV = edict()
2025-07-15 13:46:10,767   INFO  cfg.MODEL.MAP_TO_BEV.NAME: HeightCompression
2025-07-15 13:46:10,767   INFO  cfg.MODEL.MAP_TO_BEV.NUM_BEV_FEATURES: 256
2025-07-15 13:46:10,767   INFO  
cfg.MODEL.BACKBONE_2D = edict()
2025-07-15 13:46:10,767   INFO  cfg.MODEL.BACKBONE_2D.NAME: BaseBEVBackbone
2025-07-15 13:46:10,767   INFO  cfg.MODEL.BACKBONE_2D.LAYER_NUMS: [4, 4]
2025-07-15 13:46:10,767   INFO  cfg.MODEL.BACKBONE_2D.LAYER_STRIDES: [1, 2]
2025-07-15 13:46:10,767   INFO  cfg.MODEL.BACKBONE_2D.NUM_FILTERS: [64, 128]
2025-07-15 13:46:10,767   INFO  cfg.MODEL.BACKBONE_2D.UPSAMPLE_STRIDES: [1, 2]
2025-07-15 13:46:10,767   INFO  cfg.MODEL.BACKBONE_2D.NUM_UPSAMPLE_FILTERS: [128, 128]
2025-07-15 13:46:10,767   INFO  
cfg.MODEL.DENSE_HEAD = edict()
2025-07-15 13:46:10,767   INFO  cfg.MODEL.DENSE_HEAD.NAME: AnchorHeadSingle
2025-07-15 13:46:10,767   INFO  cfg.MODEL.DENSE_HEAD.CLASS_AGNOSTIC: False
2025-07-15 13:46:10,767   INFO  cfg.MODEL.DENSE_HEAD.USE_DIRECTION_CLASSIFIER: True
2025-07-15 13:46:10,767   INFO  cfg.MODEL.DENSE_HEAD.DIR_OFFSET: 0.78539
2025-07-15 13:46:10,767   INFO  cfg.MODEL.DENSE_HEAD.DIR_LIMIT_OFFSET: 0.0
2025-07-15 13:46:10,767   INFO  cfg.MODEL.DENSE_HEAD.NUM_DIR_BINS: 2
2025-07-15 13:46:10,767   INFO  cfg.MODEL.DENSE_HEAD.ANCHOR_GENERATOR_CONFIG: [{'class_name': 'Car', 'anchor_sizes': [[3.9, 1.6, 1.56]], 'anchor_rotations': [0, 1.57], 'anchor_bottom_heights': [-1.78], 'align_center': False, 'feature_map_stride': 8, 'matched_threshold': 0.6, 'unmatched_threshold': 0.45}]
2025-07-15 13:46:10,767   INFO  
cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG = edict()
2025-07-15 13:46:10,767   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.NAME: AxisAlignedTargetAssigner
2025-07-15 13:46:10,767   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.POS_FRACTION: -1.0
2025-07-15 13:46:10,767   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.SAMPLE_SIZE: 512
2025-07-15 13:46:10,767   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.NORM_BY_NUM_EXAMPLES: False
2025-07-15 13:46:10,767   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.MATCH_HEIGHT: False
2025-07-15 13:46:10,767   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.BOX_CODER: ResidualCoder
2025-07-15 13:46:10,767   INFO  
cfg.MODEL.DENSE_HEAD.LOSS_CONFIG = edict()
2025-07-15 13:46:10,767   INFO  
cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS = edict()
2025-07-15 13:46:10,767   INFO  cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.cls_weight: 1.0
2025-07-15 13:46:10,767   INFO  cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.loc_weight: 2.0
2025-07-15 13:46:10,767   INFO  cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.dir_weight: 0.2
2025-07-15 13:46:10,767   INFO  cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.code_weights: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
2025-07-15 13:46:10,767   INFO  
cfg.MODEL.ROI_HEAD = edict()
2025-07-15 13:46:10,767   INFO  cfg.MODEL.ROI_HEAD.NAME: TEDMHead
2025-07-15 13:46:10,767   INFO  cfg.MODEL.ROI_HEAD.CLASS_AGNOSTIC: True
2025-07-15 13:46:10,767   INFO  cfg.MODEL.ROI_HEAD.ROT_NUM: 3
2025-07-15 13:46:10,767   INFO  
cfg.MODEL.ROI_HEAD.PART = edict()
2025-07-15 13:46:10,767   INFO  cfg.MODEL.ROI_HEAD.PART.IN_CHANNEL: 256
2025-07-15 13:46:10,767   INFO  cfg.MODEL.ROI_HEAD.PART.SIZE: 7
2025-07-15 13:46:10,767   INFO  cfg.MODEL.ROI_HEAD.PART.GRID_OFFSETS: [0.0, 40.0]
2025-07-15 13:46:10,767   INFO  cfg.MODEL.ROI_HEAD.PART.FEATMAP_STRIDE: 0.4
2025-07-15 13:46:10,767   INFO  cfg.MODEL.ROI_HEAD.SHARED_FC: [256, 256]
2025-07-15 13:46:10,767   INFO  cfg.MODEL.ROI_HEAD.CLS_FC: [256, 256]
2025-07-15 13:46:10,767   INFO  cfg.MODEL.ROI_HEAD.REG_FC: [256, 256]
2025-07-15 13:46:10,767   INFO  cfg.MODEL.ROI_HEAD.DP_RATIO: 0.01
2025-07-15 13:46:10,767   INFO  
cfg.MODEL.ROI_HEAD.NMS_CONFIG = edict()
2025-07-15 13:46:10,767   INFO  
cfg.MODEL.ROI_HEAD.NMS_CONFIG.TRAIN = edict()
2025-07-15 13:46:10,767   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TRAIN.NMS_TYPE: nms_gpu
2025-07-15 13:46:10,767   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TRAIN.MULTI_CLASSES_NMS: False
2025-07-15 13:46:10,767   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TRAIN.NMS_PRE_MAXSIZE: 4000
2025-07-15 13:46:10,767   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TRAIN.NMS_POST_MAXSIZE: 512
2025-07-15 13:46:10,767   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TRAIN.NMS_THRESH: 0.8
2025-07-15 13:46:10,767   INFO  
cfg.MODEL.ROI_HEAD.NMS_CONFIG.TEST = edict()
2025-07-15 13:46:10,767   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TEST.NMS_TYPE: nms_gpu
2025-07-15 13:46:10,767   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TEST.MULTI_CLASSES_NMS: False
2025-07-15 13:46:10,767   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TEST.USE_FAST_NMS: True
2025-07-15 13:46:10,767   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TEST.SCORE_THRESH: 0.0
2025-07-15 13:46:10,767   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TEST.NMS_PRE_MAXSIZE: 2000
2025-07-15 13:46:10,767   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TEST.NMS_POST_MAXSIZE: 50
2025-07-15 13:46:10,767   INFO  cfg.MODEL.ROI_HEAD.NMS_CONFIG.TEST.NMS_THRESH: 0.75
2025-07-15 13:46:10,767   INFO  
cfg.MODEL.ROI_HEAD.ROI_GRID_POOL = edict()
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.FEATURES_SOURCE: ['x_conv3', 'x_conv4']
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.PRE_MLP: True
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.GRID_SIZE: 6
2025-07-15 13:46:10,768   INFO  
cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.POOL_LAYERS = edict()
2025-07-15 13:46:10,768   INFO  
cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.POOL_LAYERS.x_conv3 = edict()
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.POOL_LAYERS.x_conv3.MLPS: [[32, 32], [32, 32]]
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.POOL_LAYERS.x_conv3.QUERY_RANGES: [[2, 2, 2], [4, 4, 4]]
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.POOL_LAYERS.x_conv3.POOL_RADIUS: [0.4, 0.8]
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.POOL_LAYERS.x_conv3.NSAMPLE: [16, 16]
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.POOL_LAYERS.x_conv3.POOL_METHOD: max_pool
2025-07-15 13:46:10,768   INFO  
cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.POOL_LAYERS.x_conv4 = edict()
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.POOL_LAYERS.x_conv4.MLPS: [[32, 32], [32, 32]]
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.POOL_LAYERS.x_conv4.QUERY_RANGES: [[2, 2, 2], [4, 4, 4]]
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.POOL_LAYERS.x_conv4.POOL_RADIUS: [0.8, 1.6]
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.POOL_LAYERS.x_conv4.NSAMPLE: [16, 16]
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL.POOL_LAYERS.x_conv4.POOL_METHOD: max_pool
2025-07-15 13:46:10,768   INFO  
cfg.MODEL.ROI_HEAD.ROI_GRID_POOL_MM = edict()
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL_MM.FEATURES_SOURCE: ['x_conv3', 'x_conv4']
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL_MM.PRE_MLP: True
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL_MM.GRID_SIZE: 4
2025-07-15 13:46:10,768   INFO  
cfg.MODEL.ROI_HEAD.ROI_GRID_POOL_MM.POOL_LAYERS = edict()
2025-07-15 13:46:10,768   INFO  
cfg.MODEL.ROI_HEAD.ROI_GRID_POOL_MM.POOL_LAYERS.x_conv3 = edict()
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL_MM.POOL_LAYERS.x_conv3.MLPS: [[32, 32], [32, 32]]
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL_MM.POOL_LAYERS.x_conv3.QUERY_RANGES: [[2, 2, 2], [4, 4, 4]]
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL_MM.POOL_LAYERS.x_conv3.POOL_RADIUS: [0.4, 0.8]
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL_MM.POOL_LAYERS.x_conv3.NSAMPLE: [16, 16]
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL_MM.POOL_LAYERS.x_conv3.POOL_METHOD: max_pool
2025-07-15 13:46:10,768   INFO  
cfg.MODEL.ROI_HEAD.ROI_GRID_POOL_MM.POOL_LAYERS.x_conv4 = edict()
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL_MM.POOL_LAYERS.x_conv4.MLPS: [[32, 32], [32, 32]]
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL_MM.POOL_LAYERS.x_conv4.QUERY_RANGES: [[2, 2, 2], [4, 4, 4]]
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL_MM.POOL_LAYERS.x_conv4.POOL_RADIUS: [0.8, 1.6]
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL_MM.POOL_LAYERS.x_conv4.NSAMPLE: [16, 16]
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.ROI_GRID_POOL_MM.POOL_LAYERS.x_conv4.POOL_METHOD: max_pool
2025-07-15 13:46:10,768   INFO  
cfg.MODEL.ROI_HEAD.TARGET_CONFIG = edict()
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.BOX_CODER: ResidualCoder
2025-07-15 13:46:10,768   INFO  
cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE0 = edict()
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE0.ROI_PER_IMAGE: 160
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE0.FG_RATIO: 0.5
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE0.SAMPLE_ROI_BY_EACH_CLASS: True
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE0.CLS_SCORE_TYPE: roi_iou_x
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE0.CLS_FG_THRESH: [0.75]
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE0.CLS_BG_THRESH: [0.25]
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE0.CLS_BG_THRESH_LO: 0.1
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE0.HARD_BG_RATIO: 0.8
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE0.REG_FG_THRESH: [0.5]
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE0.ENABLE_HARD_SAMPLING: False
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE0.HARD_SAMPLING_THRESH: [0.5]
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE0.HARD_SAMPLING_RATIO: [0.5]
2025-07-15 13:46:10,768   INFO  
cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE1 = edict()
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE1.ROI_PER_IMAGE: 160
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE1.FG_RATIO: 0.5
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE1.SAMPLE_ROI_BY_EACH_CLASS: True
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE1.CLS_SCORE_TYPE: roi_iou_x
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE1.CLS_FG_THRESH: [0.75]
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE1.CLS_BG_THRESH: [0.25]
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE1.CLS_BG_THRESH_LO: 0.1
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE1.HARD_BG_RATIO: 0.8
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE1.REG_FG_THRESH: [0.55]
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE1.ENABLE_HARD_SAMPLING: True
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE1.HARD_SAMPLING_THRESH: [0.5]
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE1.HARD_SAMPLING_RATIO: [0.5]
2025-07-15 13:46:10,768   INFO  
cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE2 = edict()
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE2.ROI_PER_IMAGE: 160
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE2.FG_RATIO: 0.5
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE2.SAMPLE_ROI_BY_EACH_CLASS: True
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE2.CLS_SCORE_TYPE: roi_iou_x
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE2.CLS_FG_THRESH: [0.75]
2025-07-15 13:46:10,768   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE2.CLS_BG_THRESH: [0.25]
2025-07-15 13:46:10,769   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE2.CLS_BG_THRESH_LO: 0.1
2025-07-15 13:46:10,769   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE2.HARD_BG_RATIO: 0.8
2025-07-15 13:46:10,769   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE2.REG_FG_THRESH: [0.6]
2025-07-15 13:46:10,769   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE2.ENABLE_HARD_SAMPLING: True
2025-07-15 13:46:10,769   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE2.HARD_SAMPLING_THRESH: [0.5]
2025-07-15 13:46:10,769   INFO  cfg.MODEL.ROI_HEAD.TARGET_CONFIG.STAGE2.HARD_SAMPLING_RATIO: [0.5]
2025-07-15 13:46:10,769   INFO  
cfg.MODEL.ROI_HEAD.LOSS_CONFIG = edict()
2025-07-15 13:46:10,769   INFO  cfg.MODEL.ROI_HEAD.LOSS_CONFIG.CLS_LOSS: BinaryCrossEntropy
2025-07-15 13:46:10,769   INFO  cfg.MODEL.ROI_HEAD.LOSS_CONFIG.REG_LOSS: smooth-l1
2025-07-15 13:46:10,769   INFO  cfg.MODEL.ROI_HEAD.LOSS_CONFIG.CORNER_LOSS_REGULARIZATION: True
2025-07-15 13:46:10,769   INFO  cfg.MODEL.ROI_HEAD.LOSS_CONFIG.GRID_3D_IOU_LOSS: False
2025-07-15 13:46:10,769   INFO  
cfg.MODEL.ROI_HEAD.LOSS_CONFIG.LOSS_WEIGHTS = edict()
2025-07-15 13:46:10,769   INFO  cfg.MODEL.ROI_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.rcnn_cls_weight: 1.0
2025-07-15 13:46:10,769   INFO  cfg.MODEL.ROI_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.rcnn_reg_weight: 1.0
2025-07-15 13:46:10,769   INFO  cfg.MODEL.ROI_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.rcnn_corner_weight: 1.0
2025-07-15 13:46:10,769   INFO  cfg.MODEL.ROI_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.rcnn_iou3d_weight: 1.0
2025-07-15 13:46:10,769   INFO  cfg.MODEL.ROI_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.code_weights: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
2025-07-15 13:46:10,769   INFO  
cfg.MODEL.POST_PROCESSING = edict()
2025-07-15 13:46:10,769   INFO  cfg.MODEL.POST_PROCESSING.RECALL_THRESH_LIST: [0.3, 0.5, 0.7]
2025-07-15 13:46:10,769   INFO  cfg.MODEL.POST_PROCESSING.SCORE_THRESH: 0.4
2025-07-15 13:46:10,769   INFO  cfg.MODEL.POST_PROCESSING.OUTPUT_RAW_SCORE: False
2025-07-15 13:46:10,769   INFO  cfg.MODEL.POST_PROCESSING.EVAL_METRIC: kitti
2025-07-15 13:46:10,769   INFO  cfg.MODEL.POST_PROCESSING.IoU: 0.9
2025-07-15 13:46:10,769   INFO  cfg.MODEL.POST_PROCESSING.RL: True
2025-07-15 13:46:10,769   INFO  
cfg.MODEL.POST_PROCESSING.NMS_CONFIG = edict()
2025-07-15 13:46:10,769   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.MULTI_CLASSES_NMS: False
2025-07-15 13:46:10,769   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_TYPE: nms_gpu
2025-07-15 13:46:10,769   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_THRESH: 0.1
2025-07-15 13:46:10,769   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_PRE_MAXSIZE: 4096
2025-07-15 13:46:10,769   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_POST_MAXSIZE: 500
2025-07-15 13:46:10,769   INFO  
cfg.OPTIMIZATION = edict()
2025-07-15 13:46:10,769   INFO  cfg.OPTIMIZATION.BATCH_SIZE_PER_GPU: 2
2025-07-15 13:46:10,769   INFO  cfg.OPTIMIZATION.NUM_EPOCHS: 60
2025-07-15 13:46:10,769   INFO  cfg.OPTIMIZATION.OPTIMIZER: adam_onecycle
2025-07-15 13:46:10,769   INFO  cfg.OPTIMIZATION.LR: 0.01
2025-07-15 13:46:10,769   INFO  cfg.OPTIMIZATION.WEIGHT_DECAY: 0.01
2025-07-15 13:46:10,769   INFO  cfg.OPTIMIZATION.MOMENTUM: 0.9
2025-07-15 13:46:10,769   INFO  cfg.OPTIMIZATION.MOMS: [0.95, 0.85]
2025-07-15 13:46:10,769   INFO  cfg.OPTIMIZATION.PCT_START: 0.4
2025-07-15 13:46:10,769   INFO  cfg.OPTIMIZATION.DIV_FACTOR: 10
2025-07-15 13:46:10,769   INFO  cfg.OPTIMIZATION.DECAY_STEP_LIST: [35, 45]
2025-07-15 13:46:10,769   INFO  cfg.OPTIMIZATION.LR_DECAY: 0.1
2025-07-15 13:46:10,769   INFO  cfg.OPTIMIZATION.LR_CLIP: 1e-07
2025-07-15 13:46:10,769   INFO  cfg.OPTIMIZATION.LR_WARMUP: False
2025-07-15 13:46:10,769   INFO  cfg.OPTIMIZATION.WARMUP_EPOCH: 1
2025-07-15 13:46:10,769   INFO  cfg.OPTIMIZATION.GRAD_NORM_CLIP: 10
2025-07-15 13:46:10,769   INFO  cfg.TAG: VirConv-T
2025-07-15 13:46:10,769   INFO  cfg.EXP_GROUP_PATH: models/kitti
2025-07-15 13:46:10,824   INFO  Database filter by min points Car: 14357 => 13425
2025-07-15 13:46:10,825   INFO  Database filter by difficulty Car: 13425 => 10759
2025-07-15 13:46:10,870   INFO  Database filter by min points Car: 14357 => 13425
2025-07-15 13:46:10,871   INFO  Database filter by difficulty Car: 13425 => 10759
2025-07-15 13:46:10,874   INFO  Loading KITTI dataset
2025-07-15 13:46:10,913   INFO  Total samples for KITTI dataset: 3712
2025-07-15 13:46:11,628   INFO  ==> Loading parameters from checkpoint /home/veerain/Documents/VirConv/output/models/kitti/VirConv-T/default/ckpt/checkpoint_epoch_60.pth to CPU
2025-07-15 13:46:11,771   INFO  ==> Loading optimizer parameters from checkpoint /home/veerain/Documents/VirConv/output/models/kitti/VirConv-T/default/ckpt/checkpoint_epoch_60.pth to CPU
2025-07-15 13:46:11,786   INFO  ==> Done
2025-07-15 13:46:11,787   INFO  VoxelRCNN(
  (vfe): MeanVFE()
  (backbone_3d): VirConv8x(
    (conv_input): SparseSequential(
      (0): SubMConv3d(8, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (conv1): SparseSequential(
      (0): SparseSequential(
        (0): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
    )
    (conv2): SparseSequential(
      (0): SparseSequential(
        (0): SparseConv3d(16, 32, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (1): SparseSequential(
        (0): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (2): SparseSequential(
        (0): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
    )
    (conv3): SparseSequential(
      (0): SparseSequential(
        (0): SparseConv3d(32, 64, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (1): SparseSequential(
        (0): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (2): SparseSequential(
        (0): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
    )
    (conv4): SparseSequential(
      (0): SparseSequential(
        (0): SparseConv3d(64, 64, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[0, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (1): SparseSequential(
        (0): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (2): SparseSequential(
        (0): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
    )
    (conv_out): SparseSequential(
      (0): SparseConv3d(64, 64, kernel_size=[3, 1, 1], stride=[2, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (vir_conv1): NRConvBlock(
      (d3_conv1): SparseSequential(
        (0): SubMConv3d(8, 8, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(8, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (d2_conv1): SparseSequential(
        (0): SubMConv2d(8, 8, kernel_size=[3, 3], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(8, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (d3_conv2): SparseSequential(
        (0): SubMConv3d(8, 8, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(8, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (d2_conv2): SparseSequential(
        (0): SubMConv2d(8, 8, kernel_size=[3, 3], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(8, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
    )
    (vir_conv2): NRConvBlock(
      (down_layer): SparseSequential(
        (0): SparseConv3d(16, 32, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (d3_conv1): SparseSequential(
        (0): SubMConv3d(32, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (d2_conv1): SparseSequential(
        (0): SubMConv2d(16, 16, kernel_size=[3, 3], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (d3_conv2): SparseSequential(
        (0): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (d2_conv2): SparseSequential(
        (0): SubMConv2d(16, 16, kernel_size=[3, 3], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
    )
    (vir_conv3): NRConvBlock(
      (down_layer): SparseSequential(
        (0): SparseConv3d(32, 64, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (d3_conv1): SparseSequential(
        (0): SubMConv3d(64, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (d2_conv1): SparseSequential(
        (0): SubMConv2d(32, 32, kernel_size=[3, 3], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (d3_conv2): SparseSequential(
        (0): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (d2_conv2): SparseSequential(
        (0): SubMConv2d(32, 32, kernel_size=[3, 3], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
    )
    (vir_conv4): NRConvBlock(
      (down_layer): SparseSequential(
        (0): SparseConv3d(64, 64, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[0, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (d3_conv1): SparseSequential(
        (0): SubMConv3d(64, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (d2_conv1): SparseSequential(
        (0): SubMConv2d(32, 32, kernel_size=[3, 3], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (d3_conv2): SparseSequential(
        (0): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (d2_conv2): SparseSequential(
        (0): SubMConv2d(32, 32, kernel_size=[3, 3], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
    )
  )
  (map_to_bev_module): HeightCompression()
  (backbone_2d): BaseBEVBackbone(
    (blocks): ModuleList(
      (0): Sequential(
        (0): ZeroPad2d((1, 1, 1, 1))
        (1): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (2): BatchNorm2d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (3): ReLU()
        (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (5): BatchNorm2d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (6): ReLU()
        (7): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (8): BatchNorm2d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (9): ReLU()
        (10): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (11): BatchNorm2d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (12): ReLU()
        (13): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (14): BatchNorm2d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (15): ReLU()
      )
      (1): Sequential(
        (0): ZeroPad2d((1, 1, 1, 1))
        (1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
        (2): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (3): ReLU()
        (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (5): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (6): ReLU()
        (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (8): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (9): ReLU()
        (10): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (11): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (12): ReLU()
        (13): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (14): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (15): ReLU()
      )
    )
    (deblocks): ModuleList(
      (0): Sequential(
        (0): ConvTranspose2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (1): Sequential(
        (0): ConvTranspose2d(128, 128, kernel_size=(2, 2), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
    )
  )
  (dense_head): AnchorHeadSingle(
    (cls_loss_func): SigmoidFocalClassificationLoss()
    (reg_loss_func): WeightedSmoothL1Loss()
    (dir_loss_func): WeightedCrossEntropyLoss()
    (od_loss_func): odiou_3D()
    (conv_cls): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    (conv_box): Conv2d(256, 14, kernel_size=(1, 1), stride=(1, 1))
    (conv_dir_cls): Conv2d(256, 4, kernel_size=(1, 1), stride=(1, 1))
  )
  (pfe): None
  (point_head): None
  (roi_head): TEDMHead(
    (reg_loss_func): WeightedSmoothL1Loss()
    (roi_grid_pool_layers): ModuleList(
      (0-1): 2 x NeighborVoxelSAModuleMSG(
        (groupers): ModuleList(
          (0-1): 2 x VoxelQueryAndGrouping()
        )
        (mlps_in): ModuleList(
          (0-1): 2 x Sequential(
            (0): Conv1d(64, 32, kernel_size=(1,), stride=(1,), bias=False)
            (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (mlps_pos): ModuleList(
          (0-1): 2 x Sequential(
            (0): Conv2d(3, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (mlps_out): ModuleList(
          (0-1): 2 x Sequential(
            (0): Conv1d(32, 32, kernel_size=(1,), stride=(1,), bias=False)
            (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU()
          )
        )
        (relu): ReLU()
      )
    )
    (roi_grid_pool_layers_mm): ModuleList(
      (0-1): 2 x NeighborVoxelSAModuleMSG(
        (groupers): ModuleList(
          (0-1): 2 x VoxelQueryAndGrouping()
        )
        (mlps_in): ModuleList(
          (0-1): 2 x Sequential(
            (0): Conv1d(64, 32, kernel_size=(1,), stride=(1,), bias=False)
            (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (mlps_pos): ModuleList(
          (0-1): 2 x Sequential(
            (0): Conv2d(3, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (mlps_out): ModuleList(
          (0-1): 2 x Sequential(
            (0): Conv1d(32, 32, kernel_size=(1,), stride=(1,), bias=False)
            (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU()
          )
        )
        (relu): ReLU()
      )
    )
    (shared_fc_layers): ModuleList(
      (0): Sequential(
        (0): Linear(in_features=27648, out_features=256, bias=False)
        (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Dropout(p=0.01, inplace=False)
        (4): Linear(in_features=256, out_features=256, bias=False)
        (5): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): ReLU(inplace=True)
      )
    )
    (shared_fc_layers_mm): ModuleList(
      (0): Sequential(
        (0): Linear(in_features=8192, out_features=256, bias=False)
        (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Dropout(p=0.01, inplace=False)
        (4): Linear(in_features=256, out_features=256, bias=False)
        (5): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): ReLU(inplace=True)
      )
    )
    (cls_layers): ModuleList(
      (0): Sequential(
        (0): Linear(in_features=1024, out_features=256, bias=False)
        (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Dropout(p=0.01, inplace=False)
        (4): Linear(in_features=256, out_features=256, bias=False)
        (5): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): ReLU()
        (7): Linear(in_features=256, out_features=1, bias=True)
      )
    )
    (reg_layers): ModuleList(
      (0): Sequential(
        (0): Linear(in_features=1024, out_features=256, bias=False)
        (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Dropout(p=0.01, inplace=False)
        (4): Linear(in_features=256, out_features=256, bias=False)
        (5): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): ReLU()
        (7): Linear(in_features=256, out_features=7, bias=True)
      )
    )
    (cls_layers_P): ModuleList(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=256, bias=False)
        (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Dropout(p=0.01, inplace=False)
        (4): Linear(in_features=256, out_features=256, bias=False)
        (5): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): ReLU()
        (7): Linear(in_features=256, out_features=1, bias=True)
      )
    )
    (reg_layers_P): ModuleList(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=256, bias=False)
        (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Dropout(p=0.01, inplace=False)
        (4): Linear(in_features=256, out_features=256, bias=False)
        (5): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): ReLU()
        (7): Linear(in_features=256, out_features=7, bias=True)
      )
    )
    (cls_layers_PI): ModuleList(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=256, bias=False)
        (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Dropout(p=0.01, inplace=False)
        (4): Linear(in_features=256, out_features=256, bias=False)
        (5): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): ReLU()
        (7): Linear(in_features=256, out_features=1, bias=True)
      )
    )
    (reg_layers_PI): ModuleList(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=256, bias=False)
        (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Dropout(p=0.01, inplace=False)
        (4): Linear(in_features=256, out_features=256, bias=False)
        (5): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): ReLU()
        (7): Linear(in_features=256, out_features=7, bias=True)
      )
    )
    (conv_part): Sequential(
      (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(256, 49, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (cross_attention_layers): ModuleList(
      (0): CrossAttention(
        (pos_en): PositionalEmbedding()
        (Q_linear): Linear(in_features=264, out_features=256, bias=False)
        (K_linear): Linear(in_features=264, out_features=256, bias=False)
        (V_linear): Linear(in_features=264, out_features=256, bias=False)
        (att): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
        )
      )
    )
    (cross_attention_layers_mm): ModuleList(
      (0): CrossAttention(
        (pos_en): PositionalEmbedding()
        (Q_linear): Linear(in_features=264, out_features=256, bias=False)
        (K_linear): Linear(in_features=264, out_features=256, bias=False)
        (V_linear): Linear(in_features=264, out_features=256, bias=False)
        (att): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
        )
      )
    )
  )
)
2025-07-15 13:46:11,790   INFO  **********************Start training models/kitti/VirConv-T(default)**********************
2025-07-15 13:46:11,791   INFO  **********************End training models/kitti/VirConv-T(default)**********************



2025-07-15 13:46:11,791   INFO  **********************Start evaluation models/kitti/VirConv-T(default)**********************
2025-07-15 13:46:11,791   INFO  Loading KITTI dataset
2025-07-15 13:46:11,845   INFO  Total samples for KITTI dataset: 3769
2025-07-15 13:46:11,848   INFO  ==> Loading parameters from checkpoint /home/veerain/Documents/VirConv/output/models/kitti/VirConv-T/default/ckpt/checkpoint_epoch_53.pth to GPU
2025-07-15 13:46:11,982   INFO  ==> Checkpoint trained from version: pcdet+0.5.1+1195b65+py2b9daf0
2025-07-15 13:46:11,992   INFO  ==> Done (loaded 540/540)
2025-07-15 13:46:11,995   INFO  *************** EPOCH 53 EVALUATION *****************
2025-07-15 13:49:57,494   INFO  *************** Performance of EPOCH 53 *****************
2025-07-15 13:49:57,494   INFO  Generate label finished(sec_per_example: 0.0598 second).
2025-07-15 13:49:57,494   INFO  recall_roi_0.3: 0.076607
2025-07-15 13:49:57,494   INFO  recall_rcnn_0.3: 0.955569
2025-07-15 13:49:57,494   INFO  recall_roi_0.5: 0.032039
2025-07-15 13:49:57,494   INFO  recall_rcnn_0.5: 0.949134
2025-07-15 13:49:57,494   INFO  recall_roi_0.7: 0.004450
2025-07-15 13:49:57,494   INFO  recall_rcnn_0.7: 0.863011
2025-07-15 13:49:57,496   INFO  Average predicted number of objects(3769 samples): 6.302
2025-07-15 13:50:04,847   INFO  Car AP@0.70, 0.70, 0.70:
bbox AP:98.4637, 95.0507, 89.9733
bev  AP:90.3189, 88.7337, 88.3374
3d   AP:90.0327, 87.3735, 86.1937
aos  AP:98.25, 94.66, 89.60
Car AP_R40@0.70, 0.70, 0.70:
bbox AP:99.4961, 97.5170, 95.2211
bev  AP:96.3339, 93.3632, 91.1957
3d   AP:94.7783, 88.1694, 87.5532
aos  AP:99.27, 97.11, 94.75
Car AP@0.70, 0.50, 0.50:
bbox AP:98.4637, 95.0507, 89.9733
bev  AP:98.5129, 94.9353, 95.3047
3d   AP:98.4973, 94.9167, 95.2764
aos  AP:98.25, 94.66, 89.60
Car AP_R40@0.70, 0.50, 0.50:
bbox AP:99.4961, 97.5170, 95.2211
bev  AP:99.5117, 97.4986, 97.1818
3d   AP:99.5074, 97.4724, 97.1409
aos  AP:99.27, 97.11, 94.75

2025-07-15 13:50:04,848   INFO  Result is save to /home/veerain/Documents/VirConv/output/models/kitti/VirConv-T/default/eval/eval_with_train/epoch_53/val
2025-07-15 13:50:04,848   INFO  ****************Evaluation done.*****************
2025-07-15 13:50:04,859   INFO  Epoch 53 has been evaluated
2025-07-15 13:50:04,861   INFO  ==> Loading parameters from checkpoint /home/veerain/Documents/VirConv/output/models/kitti/VirConv-T/default/ckpt/checkpoint_epoch_54.pth to GPU
2025-07-15 13:50:04,950   INFO  ==> Checkpoint trained from version: pcdet+0.5.1+1195b65+py2b9daf0
2025-07-15 13:50:04,956   INFO  ==> Done (loaded 540/540)
2025-07-15 13:50:04,960   INFO  *************** EPOCH 54 EVALUATION *****************
